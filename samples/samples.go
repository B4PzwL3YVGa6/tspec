// Code generated by go-bindata.
// sources:
// samples/source/array_type.json
// samples/source/basic_types.json
// samples/source/map_type.json
// samples/source/normal_struct.json
// samples/source/struct_with_anonymous_field.json
// samples/source/struct_with_circular_reference.json
// samples/source/struct_with_inheritance.json
// samples/source/struct_with_no_export_field.json
// DO NOT EDIT!

package samples

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _samplesSourceArray_typeJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\xe2\x54\x72\x2c\x2a\x4a\xac\x0c\xa9\x2c\x48\x55\xb2\x52\xa8\xe6\xe2\xe4\x54\x2a\x81\xb0\x95\x12\x41\x12\x4a\x3a\x20\xa1\xcc\x92\xd4\xdc\x62\xa8\x3c\x42\x41\x66\x5e\x49\x6a\x7a\x6a\x11\x58\x09\xa7\x52\x5a\x7e\x51\x6e\x62\x09\x54\xdc\xcc\x44\x89\x8b\x93\xb3\x96\x8b\xb3\x96\xab\x96\x0b\x10\x00\x00\xff\xff\x9b\x7c\x61\x52\x66\x00\x00\x00")

func samplesSourceArray_typeJsonBytes() ([]byte, error) {
	return bindataRead(
		_samplesSourceArray_typeJson,
		"samples/source/array_type.json",
	)
}

func samplesSourceArray_typeJson() (*asset, error) {
	bytes, err := samplesSourceArray_typeJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "samples/source/array_type.json", size: 102, mode: os.FileMode(420), modTime: time.Unix(1504754877, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _samplesSourceBasic_typesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\xbf\x6a\xc3\x30\x10\x87\x67\xfb\x29\x82\xe6\x74\xc8\x1f\x4c\xc9\xd8\x42\xa0\x6b\x9b\xcc\xc5\x4e\x2e\xe1\x8a\x2c\x09\xe5\x04\x35\xc1\xef\x5e\x24\x13\x37\xe5\xa4\x50\x83\x06\x2f\x27\xdf\xf7\x9d\x8e\x9f\xae\x65\x21\x5e\xea\x0b\x1e\x76\x9d\x81\x8b\xd8\xcc\xae\x65\x51\x08\xea\x0c\x88\xcd\x4c\xe8\xe6\x0b\x0e\x24\xe6\xa1\x86\x24\x43\xf1\xee\xf7\x70\x60\xac\x36\x60\x09\xc7\xf6\x42\x34\x5a\xcb\xcf\x13\x82\x3c\xde\x4a\xbf\x4c\x7f\x06\xb5\x0a\xbd\x7f\xb0\x5a\xcb\x6d\x68\xf1\x07\xfd\x7c\x00\x75\x04\x29\xd0\x85\x2c\xaa\xf3\x8d\x73\xd2\xb6\xad\x29\x08\x3a\x02\x4e\xef\x08\x18\xfd\xa0\x5b\x23\xe1\x7b\xb1\x7c\x4e\x39\x94\x6b\x1b\xb0\xdc\x71\xd4\xae\x91\xdc\xf2\x3a\x02\x53\xae\x6a\x3d\x55\x75\x92\xba\xa6\x94\xa9\x5a\x33\x51\xf8\x7f\xb5\xcc\xa3\xd9\x0e\xb0\xb8\x64\xfa\x5d\x12\x6b\xdb\x0e\x34\x66\x41\x45\x8b\x2a\xe5\x40\x45\x70\x8e\x49\x50\xd1\x6a\xc9\x1c\x6f\x9e\x15\x33\xa4\x57\x35\xdd\x10\xd9\x14\xaa\x07\x7b\x7a\x64\xa8\xd6\x31\x43\x7c\x4b\xc9\xfc\x4e\xbf\x02\x4f\x2e\x2a\xca\x37\x3f\xa3\x5b\xa7\xf2\xbc\xf0\x77\xa7\xf8\x0b\x1f\x08\xff\xe3\x8f\xa4\x8f\x50\x66\x2c\xc2\x76\xf2\xa4\xc7\x9a\xe0\xc9\x37\x32\xc9\x0e\x5b\x3e\xae\xcb\x99\xf8\x3d\x46\x23\xef\x72\x66\x7e\x8f\xd1\xd0\xbb\x9c\xa9\xdf\x63\x34\xf6\x2e\x63\xee\xbd\x82\x07\xdf\xe5\x4b\xbe\x17\x44\xf9\x86\x6c\x46\x85\x21\x7b\x67\x29\xc3\xd7\x97\x7d\xf9\x13\x00\x00\xff\xff\x0e\xf0\xf7\x10\xe6\x07\x00\x00")

func samplesSourceBasic_typesJsonBytes() ([]byte, error) {
	return bindataRead(
		_samplesSourceBasic_typesJson,
		"samples/source/basic_types.json",
	)
}

func samplesSourceBasic_typesJson() (*asset, error) {
	bytes, err := samplesSourceBasic_typesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "samples/source/basic_types.json", size: 2022, mode: os.FileMode(420), modTime: time.Unix(1504754887, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _samplesSourceMap_typeJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\xe2\x54\xf2\x4d\x2c\x08\xa9\x2c\x48\x55\xb2\x52\xa8\xe6\xe2\xe4\x54\x2a\x81\xb0\x95\xf2\x93\xb2\x52\x93\x4b\x94\x74\x40\x62\x89\x29\x29\x99\x25\x99\xf9\x79\x89\x39\x01\x45\xf9\x05\xa9\x45\x25\x99\xa9\xc5\x50\xf5\x08\x0d\x99\x79\x25\xa9\xe9\xa9\x45\x60\x1d\x9c\x4a\x69\xf9\x45\xb9\x89\x25\x50\x71\x33\x13\x25\x2e\x4e\xce\x5a\x2e\xce\x5a\xae\x5a\x2e\x40\x00\x00\x00\xff\xff\xa9\x9c\xa2\xd5\x74\x00\x00\x00")

func samplesSourceMap_typeJsonBytes() ([]byte, error) {
	return bindataRead(
		_samplesSourceMap_typeJson,
		"samples/source/map_type.json",
	)
}

func samplesSourceMap_typeJson() (*asset, error) {
	bytes, err := samplesSourceMap_typeJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "samples/source/map_type.json", size: 116, mode: os.FileMode(420), modTime: time.Unix(1504754882, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _samplesSourceNormal_structJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x96\xcb\xaa\xdb\x30\x10\x86\xd7\xf6\x53\x1c\xd4\x2e\x53\x42\x2e\x98\x92\x65\x03\x81\x6e\xb2\x68\x92\x75\xf0\x65\x1c\xa6\xc8\x92\x91\x47\x50\x13\xf2\xee\x45\x72\x93\x3a\x48\x0a\x31\x47\x0b\x6f\x24\xcd\xf7\xc9\xc3\x2f\xa4\x6b\x9a\xb0\x1f\x79\x87\xe5\xb1\x6f\xa1\x63\x9b\x8f\x6b\x9a\x24\x8c\xfa\x16\xd8\xe6\x83\xc9\xe2\x37\x94\xc4\x66\x76\x0c\x89\xdb\xc1\xd1\x72\x3b\xd1\x2a\xd9\x82\x22\x7c\x94\x27\xac\x90\x92\x9f\x6b\x04\x5e\xdd\x87\xfe\x33\xcd\x1c\xe4\xc2\xd6\x3e\x61\xa5\xe4\x3b\x5b\x62\x26\x6e\xb3\x01\xd4\x13\x84\x40\x1d\x29\x14\x97\x3b\xa7\x96\xaa\xc9\xc9\x0a\x7a\x02\x97\xde\x13\x38\xf4\x52\x36\x2d\x87\x3f\x8b\xe5\xf7\x90\x43\xe8\xa6\x00\xe5\x3a\x2a\xa9\x0b\xee\x5a\xb6\x0f\x60\xc8\x95\xad\xa7\xaa\x6a\x2e\x73\x0a\x99\xb2\xb5\x23\xb2\xeb\x57\xcb\x38\x9a\xdd\x00\xf3\x4b\xa6\xff\x4b\xa0\x6d\xbb\x81\xe6\x58\x50\xd0\x22\x0b\x39\x50\x10\x5c\x7c\x12\x14\xb4\x5a\x3a\x8e\x9f\x86\xe5\x33\x84\x5b\x35\xdd\xe0\xe9\x14\x8a\x17\x7d\x7a\x65\xc8\xd6\x3e\x83\xbf\x4b\xc1\xfc\x4e\xff\x05\x37\xb9\x28\x28\xde\xfe\x1d\xba\xd2\x22\xce\x09\xff\xa5\x85\x7b\xc2\x07\xc2\x7b\xfc\x07\xe9\x60\x87\x1d\x16\x61\x33\x79\xa7\x55\x4e\xf0\xcd\x14\x3a\x92\x23\x36\xee\x76\x75\xcc\xc4\x9f\xd0\x1b\x79\x1d\x33\xf3\x27\xf4\x86\x5e\xc7\x4c\xfd\x09\xbd\xb1\xd7\x11\x73\x6f\x14\x6e\xf0\x75\xbc\xe4\x1b\x81\x97\xdf\x92\x8a\xa8\x68\x49\x8d\x2c\xa9\xfd\x8c\x8c\xed\x4d\x31\x3f\x90\xd2\x25\xbd\x75\xc9\x3f\x15\x04\xaf\x79\xf3\x12\x38\xd3\xe8\xe5\xf0\xe2\x9d\x90\x24\xec\xab\x82\xda\xcc\x7c\x99\x57\x50\xa3\x40\x42\x29\xba\xf9\x68\xdd\xf8\xbe\x54\x90\x13\xc4\x38\x69\xdb\x81\x34\x62\xff\xbb\x9e\x3e\xdb\xf1\xfd\x80\x19\xf7\x3a\xbd\xa5\x7f\x03\x00\x00\xff\xff\x9f\x99\x8f\x01\x52\x09\x00\x00")

func samplesSourceNormal_structJsonBytes() ([]byte, error) {
	return bindataRead(
		_samplesSourceNormal_structJson,
		"samples/source/normal_struct.json",
	)
}

func samplesSourceNormal_structJson() (*asset, error) {
	bytes, err := samplesSourceNormal_structJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "samples/source/normal_struct.json", size: 2386, mode: os.FileMode(420), modTime: time.Unix(1504754892, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _samplesSourceStruct_with_anonymous_fieldJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x93\xb1\x4e\xc3\x30\x10\x86\x67\xfb\x29\x2a\xc3\x18\xa9\x7b\xb7\x22\xc1\x56\x09\x29\x03\x63\xe4\x36\x0e\x18\x39\x3e\xcb\xb9\x0e\x51\x95\x77\x47\x71\xe2\x72\xe0\x58\x08\xc2\x02\x4b\x87\xbb\xeb\x77\x9f\x7e\x5f\x2e\x9c\x89\x12\xfd\xf9\x84\x4f\x1a\x5f\xf6\x16\x6c\xdf\xc2\xb9\x7b\xd0\xca\xd4\x62\xb7\xb9\x70\xc6\x04\xf6\x4e\x89\xdd\x46\xc0\xf1\x55\x9d\x50\x14\xa1\xa6\xd1\x84\x62\xf6\xcf\x61\xcc\x79\x70\xca\xa3\x56\xdd\x0c\x63\x42\xc6\xb1\x4a\x7a\x2f\xfb\x58\x7f\x5f\x33\x95\x8b\xb9\x18\xf7\x5c\xe9\x7b\xda\xd6\xa8\xda\x2b\x9a\x31\x71\xeb\x55\x33\x4e\xdf\x6c\x6b\xd5\x68\xab\x51\x83\xed\xb6\x39\xc7\xea\x23\xb4\xba\x37\x28\x02\x68\x18\x7f\x87\xe2\x93\x6f\x2b\x5d\x6a\x4b\x42\x59\xd4\x3d\x48\x17\x9b\xb2\xae\x83\x90\x34\x8f\x49\x2c\x2b\xdc\x0f\xd2\x7d\x65\xde\x05\x08\x91\x4f\x34\xa7\x35\xd1\xf4\xa7\x2a\x33\x85\xcf\x22\x03\x0f\x2a\xd9\x1b\x59\xca\x7f\xcd\xcd\x2d\xf1\x72\x67\x78\x04\x30\x55\x43\xce\x9c\x2c\x1d\x7b\x4a\xda\xe4\x51\xef\x00\xcc\x74\xdc\x24\xe5\x0e\xbd\xb6\xcf\x39\xd4\xd4\x4d\x48\x65\x28\x13\xd6\xb7\xd2\x8a\x2f\xfe\x3b\x59\x45\xda\x7f\x4c\xaa\xa4\x87\xbf\x36\x28\xf2\x8d\xfc\x9d\x9c\xf8\xc0\xdf\x02\x00\x00\xff\xff\x24\xd9\x67\xc7\xe4\x05\x00\x00")

func samplesSourceStruct_with_anonymous_fieldJsonBytes() ([]byte, error) {
	return bindataRead(
		_samplesSourceStruct_with_anonymous_fieldJson,
		"samples/source/struct_with_anonymous_field.json",
	)
}

func samplesSourceStruct_with_anonymous_fieldJson() (*asset, error) {
	bytes, err := samplesSourceStruct_with_anonymous_fieldJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "samples/source/struct_with_anonymous_field.json", size: 1508, mode: os.FileMode(420), modTime: time.Unix(1504754908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _samplesSourceStruct_with_circular_referenceJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x0a\x02\x31\x0c\x86\xe7\xe4\x29\x24\x3a\x0a\xb7\xbb\xfa\x06\x3a\x38\x8a\xc6\x14\x23\x47\x5b\x72\xb9\x41\x8e\xbe\xbb\xb4\xdc\x20\x22\x1d\x02\xe1\xe7\xfb\xbf\x64\x41\xa0\xb3\xdb\xcc\x7e\x51\x7f\x1e\xd5\x78\x1e\x6f\x76\x92\x20\x26\x91\x85\x0e\x9b\x05\x01\xc8\xdf\xb9\xee\x94\xee\x2f\x61\xa7\x7d\xcb\xd4\xc7\x16\xf6\xfa\x8d\xcc\x96\xb2\x98\xab\x4c\xab\x0f\x88\x57\xf2\x6a\x3f\xa7\xbe\xc5\xff\x75\x00\xb4\x33\x09\x15\xd8\x0e\x0f\x09\x1a\xd5\x35\xc5\x69\xe8\xfd\x51\x7b\x05\xdb\x14\x2c\xf8\x09\x00\x00\xff\xff\xb2\xdf\x8b\x0c\xf7\x00\x00\x00")

func samplesSourceStruct_with_circular_referenceJsonBytes() ([]byte, error) {
	return bindataRead(
		_samplesSourceStruct_with_circular_referenceJson,
		"samples/source/struct_with_circular_reference.json",
	)
}

func samplesSourceStruct_with_circular_referenceJson() (*asset, error) {
	bytes, err := samplesSourceStruct_with_circular_referenceJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "samples/source/struct_with_circular_reference.json", size: 247, mode: os.FileMode(420), modTime: time.Unix(1504754901, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _samplesSourceStruct_with_inheritanceJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x96\xc1\x6b\xdb\x30\x14\xc6\xcf\xf6\x5f\x51\xb4\x1d\x3b\x4a\xd3\x10\x46\x8f\x0b\x04\x7a\xe9\xa0\x6d\xd8\x61\x8c\xa0\x38\xcf\xed\x1b\xb2\x64\xe4\x27\x98\x09\xfd\xdf\x87\xe4\x36\x55\x2a\xc9\xc4\x44\x07\x5f\x24\xbd\xef\xf7\xf4\xf9\x13\xd2\xbe\x2c\xd8\x0f\xde\x61\xf5\xd4\xb7\xd0\xb1\xdb\x8b\x7d\x59\x14\x8c\xfa\x16\xd8\xed\x05\x53\xdb\xbf\x50\x11\xbb\x74\x63\x48\xc2\x0d\x7a\xcb\xdd\x44\xab\x55\x0b\x9a\xf0\x50\x5e\xb0\xad\x52\x62\x53\x23\x88\xdd\xfb\xd0\x87\xa6\x9d\x03\x2e\x5d\xed\x91\xac\x52\x62\xe5\x4a\xec\xc4\xeb\xe5\x20\xd4\x13\xa4\x84\x3a\xd2\x28\x9f\xdf\x75\x6a\xa5\x1b\x4e\x0e\xd0\x13\x84\xea\x3d\x41\xa0\x5e\xa9\xa6\x15\xf0\xef\x7a\xf6\x3d\xc5\x90\xa6\xd9\x82\x0e\x19\x3b\x65\xb6\x22\xa4\x2c\x0f\x82\x29\xd6\x62\x3e\x15\x55\x0b\xc5\x29\x45\x5a\xcc\x03\x90\x5b\x7f\x33\xcb\x83\x59\x0d\x62\x71\xc8\xf4\xbd\x24\x6c\x5b\x0d\x6a\x01\x05\x25\x5d\x2f\x52\x0c\x94\x04\xcf\x31\x08\x4a\xba\x99\x05\x8c\x3b\xab\x15\x23\xa4\xad\x9a\x4e\x88\x38\x85\x72\xc4\xa7\x31\xc2\x62\x1e\x23\xc4\x5d\x4a\xe6\x77\xfa\x16\xc2\xe4\xa2\xa4\x7c\xfd\x07\xea\xda\xc8\x3c\x27\xfc\xc1\xc8\xf0\x84\x0f\x0a\xa7\xe9\x1f\x94\x1e\xdd\x70\xa0\x45\xd8\x4c\xee\x74\xc7\x09\xbe\xd9\xc2\x00\xf2\x84\x4d\xd8\xae\xc9\x99\xf8\x35\x46\x23\x6f\x72\x66\x7e\x8d\xd1\xd0\x9b\x9c\xa9\x5f\x63\x34\xf6\x26\x63\xee\x2d\x22\x0c\xbe\xc9\x97\x7c\x0b\x88\xea\xb7\xa4\x33\x22\x5a\xd2\x1e\xa5\x74\x9f\x85\xb1\x7b\x5b\x2c\x1e\x49\x9b\x8a\x4e\xba\xe4\x8f\x0a\x92\xd7\xbc\x7d\x09\x6c\xc8\x7b\x39\x8c\xbc\x13\x8a\x82\x7d\xd5\x50\xdb\x99\x2f\x57\x3b\xa8\x51\x22\xa1\x92\xdd\x95\xb7\xce\xbf\x2f\x35\x70\x82\x1c\x27\x6d\x39\x28\x79\xda\x6f\xd7\xd3\xb9\x8e\xdf\x0f\x32\x9f\xbd\x1e\x4c\xfb\x85\xf4\xb2\x44\x5d\x19\xc1\xf5\x03\xd4\xa0\x41\x56\x70\x92\xf5\x63\xf5\xa9\x3f\x51\xbd\xad\xdc\xe8\x4f\xa8\x23\x23\xa2\x72\xc9\xff\x32\xd6\x47\x7a\xcf\x77\xf2\x05\x34\x12\x9f\xbe\x5b\xbf\xd2\xad\xe1\x42\xfc\xb4\x7d\xfd\xb6\xb4\xfd\xb9\xad\xfe\x49\x79\x27\x5d\xd4\x37\x9d\x7f\x38\x92\xa4\xa3\x73\xe1\xbb\x50\xbe\x96\xff\x03\x00\x00\xff\xff\xe0\x8f\x50\xbe\x4c\x0b\x00\x00")

func samplesSourceStruct_with_inheritanceJsonBytes() ([]byte, error) {
	return bindataRead(
		_samplesSourceStruct_with_inheritanceJson,
		"samples/source/struct_with_inheritance.json",
	)
}

func samplesSourceStruct_with_inheritanceJson() (*asset, error) {
	bytes, err := samplesSourceStruct_with_inheritanceJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "samples/source/struct_with_inheritance.json", size: 2892, mode: os.FileMode(420), modTime: time.Unix(1504754897, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _samplesSourceStruct_with_no_export_fieldJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\xe2\x54\x0a\x2e\x29\x2a\x4d\x2e\x09\xcf\x2c\xc9\xf0\xcb\x77\xad\x28\xc8\x2f\x2a\x71\xcb\x4c\xcd\x49\x51\xb2\x52\xa8\xe6\xe2\xe4\x54\x2a\xa9\x2c\x48\x55\xb2\x52\x50\xca\x4f\xca\x4a\x4d\x2e\x51\xd2\x01\x8b\x65\x96\xe4\x80\x05\x71\xe9\xe5\xe2\xac\xe5\xaa\xe5\x02\x04\x00\x00\xff\xff\xab\x87\xe6\x3d\x5e\x00\x00\x00")

func samplesSourceStruct_with_no_export_fieldJsonBytes() ([]byte, error) {
	return bindataRead(
		_samplesSourceStruct_with_no_export_fieldJson,
		"samples/source/struct_with_no_export_field.json",
	)
}

func samplesSourceStruct_with_no_export_fieldJson() (*asset, error) {
	bytes, err := samplesSourceStruct_with_no_export_fieldJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "samples/source/struct_with_no_export_field.json", size: 94, mode: os.FileMode(420), modTime: time.Unix(1504754915, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"samples/source/array_type.json": samplesSourceArray_typeJson,
	"samples/source/basic_types.json": samplesSourceBasic_typesJson,
	"samples/source/map_type.json": samplesSourceMap_typeJson,
	"samples/source/normal_struct.json": samplesSourceNormal_structJson,
	"samples/source/struct_with_anonymous_field.json": samplesSourceStruct_with_anonymous_fieldJson,
	"samples/source/struct_with_circular_reference.json": samplesSourceStruct_with_circular_referenceJson,
	"samples/source/struct_with_inheritance.json": samplesSourceStruct_with_inheritanceJson,
	"samples/source/struct_with_no_export_field.json": samplesSourceStruct_with_no_export_fieldJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"samples": &bintree{nil, map[string]*bintree{
		"source": &bintree{nil, map[string]*bintree{
			"array_type.json": &bintree{samplesSourceArray_typeJson, map[string]*bintree{}},
			"basic_types.json": &bintree{samplesSourceBasic_typesJson, map[string]*bintree{}},
			"map_type.json": &bintree{samplesSourceMap_typeJson, map[string]*bintree{}},
			"normal_struct.json": &bintree{samplesSourceNormal_structJson, map[string]*bintree{}},
			"struct_with_anonymous_field.json": &bintree{samplesSourceStruct_with_anonymous_fieldJson, map[string]*bintree{}},
			"struct_with_circular_reference.json": &bintree{samplesSourceStruct_with_circular_referenceJson, map[string]*bintree{}},
			"struct_with_inheritance.json": &bintree{samplesSourceStruct_with_inheritanceJson, map[string]*bintree{}},
			"struct_with_no_export_field.json": &bintree{samplesSourceStruct_with_no_export_fieldJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

