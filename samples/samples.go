// Code generated by go-bindata.
// sources:
// source/array_type.json
// source/basic_types.json
// source/map_type.json
// source/normal_struct.json
// source/struct_with_anonymous_field.json
// source/struct_with_circular_reference.json
// source/struct_with_inheritance.json
// source/struct_with_no_export_field.json
// DO NOT EDIT!

package samples

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sourceArray_typeJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\xe2\x54\x72\x2c\x2a\x4a\xac\x0c\xa9\x2c\x48\x55\xb2\x52\xa8\xe6\xe2\xe4\x54\x2a\x81\xb0\x95\x12\x41\x12\x4a\x3a\x20\xa1\xcc\x92\xd4\xdc\x62\xa8\x3c\x42\x41\x66\x5e\x49\x6a\x7a\x6a\x11\x58\x09\xa7\x52\x5a\x7e\x51\x6e\x62\x09\x54\x5c\x89\x8b\x93\xb3\x96\x8b\xb3\x96\xab\x96\x0b\x10\x00\x00\xff\xff\xa4\x08\x73\xcd\x64\x00\x00\x00")

func sourceArray_typeJsonBytes() ([]byte, error) {
	return bindataRead(
		_sourceArray_typeJson,
		"source/array_type.json",
	)
}

func sourceArray_typeJson() (*asset, error) {
	bytes, err := sourceArray_typeJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "source/array_type.json", size: 100, mode: os.FileMode(420), modTime: time.Unix(1503379971, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sourceBasic_typesJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xd2\xbd\x6e\xc3\x20\x10\x07\xf0\x19\x9e\x22\x62\x4e\x87\x7c\xc8\x8a\x32\xf6\x19\xba\x57\xd8\x3e\x47\x54\x18\x10\xbe\x93\x6a\x45\x7e\xf7\xca\x44\x6d\xa9\x09\xae\x42\x06\x0f\x3e\xee\x7e\xf8\xe4\xff\x95\x33\xf1\x2a\x07\xd5\xbc\x8d\x0e\x06\x71\xde\x5c\x39\x63\x02\x47\x07\xe2\xbc\x11\xb6\xfe\x80\x06\xc5\x36\xd4\x14\xea\x50\x8c\xda\xc3\x81\xf3\xd6\x81\x47\xf5\x33\xce\x44\x6d\xad\x7e\xef\x14\xe8\xf6\xbb\xf4\x6b\xce\x67\x20\x8d\x98\xab\xd3\xf6\xd6\x3e\x22\xe4\xda\x07\xf4\xca\x5c\xc2\x4d\x8c\x89\xce\xfa\x5e\x62\x60\x46\x84\xd8\x68\x6c\xef\x34\x7c\xee\xf6\xa7\x9c\x64\xa8\xaf\xc1\xa7\x52\x6b\xa9\xd6\xf7\xac\xea\xf8\x28\xd5\x69\x2b\x31\x96\x42\xe1\xb0\x2f\x72\x0e\xfb\x44\x2a\xfc\xa2\xea\x18\x4b\xca\xe0\xae\xca\x39\xca\x20\x5c\xee\x41\x61\x6a\xc1\xe4\x17\x5b\x63\xfe\xee\xa5\xcc\xca\x56\x6b\x4c\xb2\x54\xf6\xc7\xaf\x29\xa7\x05\x52\x62\xc4\x84\x27\xf3\x74\x94\x6f\x7d\xff\x28\x51\x3f\xaa\xfe\xe1\x3b\x5b\x89\xf0\x32\x0f\xc6\x10\x95\x45\x83\x92\x6c\x50\x59\x38\x28\x49\x07\x95\xc5\x83\x92\x7c\x50\x51\x40\x68\x99\x10\x2a\x89\x08\x2d\x32\x32\xbf\x3b\xf4\xcf\x84\x9e\x87\x67\xe2\x13\xff\x0a\x00\x00\xff\xff\x23\x39\xc2\x6f\xc1\x05\x00\x00")

func sourceBasic_typesJsonBytes() ([]byte, error) {
	return bindataRead(
		_sourceBasic_typesJson,
		"source/basic_types.json",
	)
}

func sourceBasic_typesJson() (*asset, error) {
	bytes, err := sourceBasic_typesJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "source/basic_types.json", size: 1473, mode: os.FileMode(420), modTime: time.Unix(1503379455, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sourceMap_typeJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\xe2\x54\xf2\x4d\x2c\x08\xa9\x2c\x48\x55\xb2\x52\xa8\xe6\xe2\xe4\x54\x2a\x81\xb0\x95\xf2\x93\xb2\x52\x93\x4b\x94\x74\x40\x62\x89\x29\x29\x99\x25\x99\xf9\x79\x89\x39\x01\x45\xf9\x05\xa9\x45\x25\x99\xa9\xc5\x50\xf5\x08\x0d\x99\x79\x25\xa9\xe9\xa9\x45\x60\x1d\x9c\x4a\x69\xf9\x45\xb9\x89\x25\x50\x71\x25\x2e\x4e\xce\x5a\x2e\xce\x5a\xae\x5a\x2e\x40\x00\x00\x00\xff\xff\x14\x15\x20\xef\x72\x00\x00\x00")

func sourceMap_typeJsonBytes() ([]byte, error) {
	return bindataRead(
		_sourceMap_typeJson,
		"source/map_type.json",
	)
}

func sourceMap_typeJson() (*asset, error) {
	bytes, err := sourceMap_typeJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "source/map_type.json", size: 114, mode: os.FileMode(420), modTime: time.Unix(1503379952, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sourceNormal_structJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x95\x4d\x6f\xb3\x30\x0c\x80\xcf\xe1\x57\x54\x79\xdf\x63\xa7\xaa\x1f\xaa\xaa\x1e\xf7\x03\x76\xd9\xee\x15\x1f\xa6\xf2\x14\x12\x14\x6c\x69\xa8\xea\x7f\x9f\x92\x76\x5b\x0a\x85\xad\xe1\xc0\x01\xc7\x7e\x82\xe1\xc1\x39\x25\x42\x3e\xa7\x0d\xe6\x6f\x6d\x0d\x8d\xdc\xcf\x4e\x89\x10\x92\xda\x1a\xe4\x7e\x26\x4d\xf6\x0e\x39\xc9\xb9\x8f\x21\x29\x1f\x0c\xd2\xfd\x42\x6d\x4d\x0d\x96\xf0\xbb\x5c\xc8\xcc\x18\x75\x28\x11\x54\xf1\x15\xfa\x61\xba\x35\x48\xb5\x74\xd1\xf3\xfc\x92\xde\x12\x0c\xa5\x37\x64\x51\x1f\xfd\x4e\x42\xc8\xd2\xd8\x2a\x25\x8f\x69\x09\x42\x46\x6e\xaa\x5a\xc1\xc7\x72\xb5\x1b\x22\x69\xae\x32\xb0\x7d\x52\x61\x38\x53\xf7\x58\xdb\xcd\xa3\xa8\x52\x99\x94\x42\x92\x0f\xac\x57\x51\x9c\xf5\xaa\x47\x8a\x7c\xa2\xed\x26\x24\xa1\xa6\xe5\x76\x88\x83\x9a\xe0\x78\x0f\xe4\xab\x3a\x98\xe1\xc6\xc6\x30\xb7\x7d\xa1\x1e\xe9\x6a\x0c\xd3\x6b\x6a\xf0\xc3\x8f\x51\x76\x1d\x48\x0c\x23\x44\x58\xd6\x93\x55\xbe\xe4\xfd\x42\x09\xf2\x09\xab\x87\xf7\x2c\x52\x82\x27\x57\x18\x82\x38\x4e\x0d\xee\xb9\xc1\x71\x72\x70\xcf\x0e\x8e\xd3\x83\x7b\x7e\x70\x94\x20\xdc\x35\x84\x63\x14\xe1\x8e\x23\xee\xbe\x26\x3b\x45\xfa\xc4\x5f\x8e\x27\x5f\xdc\xba\x7a\x25\xcb\x39\xfd\x69\x7e\xdf\x14\x0c\x4e\x70\x37\xe4\x0f\x14\x1c\x0a\x42\xc8\xff\x16\x4a\x47\xf8\xb7\x28\xa0\x44\x8d\x84\x46\x37\x8b\xe0\x3c\x08\x67\xa8\x85\x94\x60\xa2\x90\xd7\xa9\x16\xf1\x37\x5e\x5f\x50\x72\x4e\x3e\x03\x00\x00\xff\xff\x35\x28\x07\x24\xe2\x06\x00\x00")

func sourceNormal_structJsonBytes() ([]byte, error) {
	return bindataRead(
		_sourceNormal_structJson,
		"source/normal_struct.json",
	)
}

func sourceNormal_structJson() (*asset, error) {
	bytes, err := sourceNormal_structJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "source/normal_struct.json", size: 1762, mode: os.FileMode(420), modTime: time.Unix(1503379492, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sourceStruct_with_anonymous_fieldJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x52\x3d\x6b\xc3\x30\x10\x9d\xa5\x5f\x11\xae\x1d\x0d\xd9\xb3\x65\x68\xb7\x42\x21\x43\x47\xa3\xc4\xe7\xf6\x8a\x2c\x09\xe9\x32\x98\xe0\xff\x5e\x24\xc7\x89\x68\x22\x0a\x76\xa1\x5d\x0c\x7e\x7a\xf7\x3e\xa4\x3b\x49\x01\x3b\xf6\xc7\x03\xbf\x11\x7f\x6c\x8d\x35\x7d\x67\x8f\xe1\x99\x50\x37\xb0\x59\x9d\xa4\x10\xc0\xbd\x43\xd8\xac\xc0\xee\x3f\xf1\xc0\x50\x25\x8c\x58\x27\xb0\x38\x9c\x68\xce\x5b\x87\x9e\x09\xc3\x59\x4c\x80\x9a\x68\xb5\xf2\x5e\xf5\x13\x7e\xb5\x19\xe1\x6a\x04\x89\xb1\xbb\xcc\x0a\x01\x8f\x1e\xdb\x48\x7a\x58\x37\xd8\x92\x21\x26\x6b\xc2\xba\x14\xa2\xbe\xfc\x6e\xa3\x68\xfd\xa4\x19\x92\xd0\x10\xbf\x43\xf5\x2d\x50\xa7\xdc\x6d\x9c\xac\x75\x24\x37\x4d\xf2\x54\xfa\xf5\xa6\xda\x82\x78\x2f\xca\xfd\x14\x2e\x24\x91\x6b\xbe\xb9\x56\x23\x23\x39\x45\xa3\x41\x26\xab\xe2\x3b\xde\xbb\xc2\x25\x7b\x71\x4f\xaf\xb4\x2a\x7b\x6b\x75\xdd\x66\xab\x98\x99\xc6\x33\x54\x06\xb2\xbb\x0a\xec\xc9\xbc\x97\x06\xc6\xd3\x19\xbd\xa7\xb7\xf9\x9d\xd6\x93\xda\xff\xee\xbc\xcb\x97\x6d\x69\xe5\xb3\xd8\x5f\x35\x96\x83\xfc\x0a\x00\x00\xff\xff\x4d\xd5\x00\x4d\xe6\x04\x00\x00")

func sourceStruct_with_anonymous_fieldJsonBytes() ([]byte, error) {
	return bindataRead(
		_sourceStruct_with_anonymous_fieldJson,
		"source/struct_with_anonymous_field.json",
	)
}

func sourceStruct_with_anonymous_fieldJson() (*asset, error) {
	bytes, err := sourceStruct_with_anonymous_fieldJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "source/struct_with_anonymous_field.json", size: 1254, mode: os.FileMode(420), modTime: time.Unix(1503379737, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sourceStruct_with_circular_referenceJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\xb1\x0a\x02\x31\x10\x44\xeb\xcd\x57\xc8\x6a\x29\x5c\x6f\xeb\x1f\x68\x61\x29\xba\x4e\x70\xe5\x48\xc2\xde\x5e\x21\x47\xfe\x5d\x12\xae\xb2\xb8\x62\x61\x19\x66\xde\x5b\x02\xf1\xd5\x6d\x16\xbf\xa9\xbf\xcf\x6a\x32\x8f\x0f\xbb\x20\xc2\x90\x04\x7c\xda\x2d\x81\x88\xfd\x5b\xda\xcf\xf9\xf9\x81\x38\x1f\x7b\xa6\x3e\xf6\x70\x6b\xdf\x9b\xc5\x72\x81\xb9\x62\x5a\x79\xc4\xb2\x36\xef\xf6\xa7\x22\xe2\x83\x21\x36\xee\x7e\x78\x21\x6a\x52\xd7\x9c\xa6\x61\xcb\xd2\x76\x35\xf4\xab\xa1\x86\x5f\x00\x00\x00\xff\xff\xdf\x19\x4e\x98\xd5\x00\x00\x00")

func sourceStruct_with_circular_referenceJsonBytes() ([]byte, error) {
	return bindataRead(
		_sourceStruct_with_circular_referenceJson,
		"source/struct_with_circular_reference.json",
	)
}

func sourceStruct_with_circular_referenceJson() (*asset, error) {
	bytes, err := sourceStruct_with_circular_referenceJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "source/struct_with_circular_reference.json", size: 213, mode: os.FileMode(420), modTime: time.Unix(1503379772, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sourceStruct_with_inheritanceJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x95\xcf\x6e\xe2\x30\x10\xc6\xcf\xce\x53\x20\xef\x1e\x59\x21\xfe\x08\x21\x8e\xbb\xa7\xbd\xec\x4a\xbb\x95\x7a\xa8\xaa\xc8\x49\x26\xe0\xca\xb1\x23\x67\x2c\x35\x42\xbc\x7b\x65\x43\x5b\x93\xe0\x14\x9c\x03\x07\xc6\x33\xbf\xf1\x37\x7c\x8c\x0f\x09\xa1\x3f\x59\xc3\xf3\x87\xb6\x86\x86\x6e\x27\x87\x84\x10\x8a\x6d\x0d\x74\x3b\xa1\x2a\x7b\x81\x1c\xe9\xd4\xc5\x38\x0a\x17\xf4\xd2\xdd\x41\xad\x55\x0d\x1a\xf9\x47\x39\xa1\x99\x52\x22\x2d\x39\x88\xe2\x3d\xf4\xc9\xb4\x67\xc0\x24\xb5\xd1\xe3\xf4\x94\xde\x22\x84\xd2\x1b\xd4\x5c\xee\x5c\x27\x42\x68\xa9\x74\xc5\xd0\x61\x5a\x04\x9f\x91\xab\xaa\x16\xf0\x3a\x5f\x6c\x42\x24\x69\xaa\x0c\x74\x9f\x54\x28\x93\x89\x6b\xac\xf5\xea\x5e\x54\x29\x14\x43\x9f\xe4\x02\xcb\x45\x14\x67\xb9\xe8\x91\x22\x6f\xb4\x5e\xf9\x24\x2e\x71\xbe\x0e\x71\xb8\x44\xd8\x5d\x03\xb9\xaa\x0e\x26\x2c\x6c\x08\x73\xa9\x8b\xcb\x01\x55\x43\x98\x9e\xa8\xe0\x0f\x3f\x44\xd9\x74\x20\x31\x0c\x1f\xa1\x8d\x1c\x6d\xe5\x53\xde\x17\x14\x2f\x1f\x79\x75\x77\xcf\x82\x21\xfc\xb0\x85\x3e\xc8\xc4\x59\xc3\xf4\xbc\x61\xe2\xcc\x61\x7a\xee\x30\x71\xf6\x30\x3d\x7f\x98\x28\x83\x98\xae\x43\x4c\x8c\x45\x4c\xc7\x23\xf6\x7b\x8d\x7a\x8c\xe9\x13\xf7\xb1\x3c\xfa\xc7\x9e\x8b\xff\xa8\x4d\x8e\x37\xed\xef\x8b\x82\xe0\x06\xb7\x4b\x3e\x45\xef\x51\x20\x84\x7e\xd7\x50\x5a\xc2\xb7\x59\x01\x25\x97\x1c\xb9\x92\xcd\xcc\x7b\x0f\xfc\x1d\xaa\x81\x21\x8c\x34\xe4\x79\xab\x45\xfc\x1b\xbd\x01\x9d\x94\x3e\x72\xdc\xff\xe2\x3a\x37\x82\xe9\x7f\x50\x82\x06\x99\xc3\x4d\xf3\x1a\xaa\x0f\x8d\x2f\x3f\x67\xa6\xba\xd3\x2a\x38\xc5\xa1\x2e\x61\x45\xbf\xe5\x1e\x34\x47\x76\xbf\x16\xbf\xd2\xe5\x30\x21\xfe\xda\x7b\x3d\xd9\x6e\xa3\xaf\xfa\x1c\x9a\x8c\x74\xee\x4b\x1b\xdf\xaf\xc1\x4e\x17\x56\xf5\xa7\x90\x1c\x93\xb7\x00\x00\x00\xff\xff\x0f\xc6\xdb\xb4\xba\x08\x00\x00")

func sourceStruct_with_inheritanceJsonBytes() ([]byte, error) {
	return bindataRead(
		_sourceStruct_with_inheritanceJson,
		"source/struct_with_inheritance.json",
	)
}

func sourceStruct_with_inheritanceJson() (*asset, error) {
	bytes, err := sourceStruct_with_inheritanceJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "source/struct_with_inheritance.json", size: 2234, mode: os.FileMode(420), modTime: time.Unix(1503379811, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sourceStruct_with_no_export_fieldJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\xe2\x54\x0a\x2e\x29\x2a\x4d\x2e\x09\xcf\x2c\xc9\xf0\xcb\x77\xad\x28\xc8\x2f\x2a\x71\xcb\x4c\xcd\x49\x51\xb2\x52\xa8\xe6\xe2\xe4\x54\x2a\xa9\x2c\x48\x55\xb2\x52\x50\xca\x4f\xca\x4a\x4d\x2e\x51\xd2\x01\x8b\x65\x96\xe4\x80\x05\x71\xe9\xe5\xe2\xac\xe5\xaa\xe5\x02\x04\x00\x00\xff\xff\xab\x87\xe6\x3d\x5e\x00\x00\x00")

func sourceStruct_with_no_export_fieldJsonBytes() ([]byte, error) {
	return bindataRead(
		_sourceStruct_with_no_export_fieldJson,
		"source/struct_with_no_export_field.json",
	)
}

func sourceStruct_with_no_export_fieldJson() (*asset, error) {
	bytes, err := sourceStruct_with_no_export_fieldJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "source/struct_with_no_export_field.json", size: 94, mode: os.FileMode(420), modTime: time.Unix(1503379647, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"source/array_type.json": sourceArray_typeJson,
	"source/basic_types.json": sourceBasic_typesJson,
	"source/map_type.json": sourceMap_typeJson,
	"source/normal_struct.json": sourceNormal_structJson,
	"source/struct_with_anonymous_field.json": sourceStruct_with_anonymous_fieldJson,
	"source/struct_with_circular_reference.json": sourceStruct_with_circular_referenceJson,
	"source/struct_with_inheritance.json": sourceStruct_with_inheritanceJson,
	"source/struct_with_no_export_field.json": sourceStruct_with_no_export_fieldJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"source": &bintree{nil, map[string]*bintree{
		"array_type.json": &bintree{sourceArray_typeJson, map[string]*bintree{}},
		"basic_types.json": &bintree{sourceBasic_typesJson, map[string]*bintree{}},
		"map_type.json": &bintree{sourceMap_typeJson, map[string]*bintree{}},
		"normal_struct.json": &bintree{sourceNormal_structJson, map[string]*bintree{}},
		"struct_with_anonymous_field.json": &bintree{sourceStruct_with_anonymous_fieldJson, map[string]*bintree{}},
		"struct_with_circular_reference.json": &bintree{sourceStruct_with_circular_referenceJson, map[string]*bintree{}},
		"struct_with_inheritance.json": &bintree{sourceStruct_with_inheritanceJson, map[string]*bintree{}},
		"struct_with_no_export_field.json": &bintree{sourceStruct_with_no_export_fieldJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

